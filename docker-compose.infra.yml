services:
  # Private Docker Registry
  registry:
    image: registry:2
    container_name: registry
    restart: unless-stopped
    env_file:
      - .env
    environment:
      REGISTRY_HTTP_ADDR: 0.0.0.0:5000
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      REGISTRY_CATALOG_MAXENTRIES: 5000
      # HTTP 설정 (업로드 안정성 향상)
      REGISTRY_HTTP_SECRET: "a-very-long-random-string-for-http-secret"
      REGISTRY_HTTP_TIMEOUT_READ: "300s"
      REGISTRY_HTTP_TIMEOUT_WRITE: "300s"
      REGISTRY_HTTP_TIMEOUT_IDLE: "900s"
      # 스토리지 설정 (업로드 청크 크기 최적화)
      REGISTRY_STORAGE_DELETE_ENABLED: "true"
      REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR: "inmemory"
      # 로그 레벨
      REGISTRY_LOG_LEVEL: "info"
    volumes:
      - registry_data:/var/lib/registry
      - ./module-infra/nginx/.htpasswd:/auth/htpasswd:ro
    networks:
      - depromeet_network

  registry-web:
    image: hyper/docker-registry-web
    container_name: registry-web
    restart: unless-stopped
    env_file:
      - .env
    environment:
      REGISTRY_URL: http://registry:5000/v2
      REGISTRY_NAME: Depromeet Team 3 Private Docker Registry
      REGISTRY_READONLY: "false"
      REGISTRY_BASIC_AUTH: "ZGVwcm9tZWV0OjEyMzQ="
      REGISTRY_TRUST_ANY_SSL: "true"
    depends_on:
      - registry
    networks:
      - depromeet_network

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: unless-stopped
    ports:
      - "8090:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
      - TZ=Asia/Seoul
    user: root
    networks:
      - depromeet_network
    mem_limit: 3g        # Jenkins 컨테이너 메모리 제한
    mem_reservation: 1g  # 예약 메모리
    cpus: 2.0

  # PLG Stack
  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
      - ./module-infra/monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    networks:
      - depromeet_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus - Metrics collector
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    profiles: ["metrics"]
    ports:
      - "9090:9090"
    volumes:
      - ./module-infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - depromeet_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Promtail - Log collector
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./module-infra/monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - depromeet_network
    depends_on:
      loki:
        condition: service_healthy

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./module-infra/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./module-infra/monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    environment:
      - GF_SERVER_ROOT_URL=https://monitoring.momuzzi.site
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PW}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/home.json
    networks:
      - depromeet_network
    depends_on:
      loki:
        condition: service_healthy

  # Node Exporter - 서버 메트릭
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    restart: unless-stopped
    profiles: ["metrics"]
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - depromeet_network

  # cAdvisor - Docker 컨테이너 메트릭
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    restart: unless-stopped
    profiles: ["metrics"]
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - depromeet_network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    restart: unless-stopped
    command:
      - '--nginx.scrape-uri=http://nginx:80/stub_status'
    ports:
      - "9113:9113"
    networks:
      - depromeet_network


volumes:
  registry_data:
    driver: local
  jenkins_home:
    driver: local
  loki-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  depromeet_network:
    external: true