worker_processes auto;       

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Docker DNS resolver 설정
    resolver 127.0.0.11 valid=30s ipv6=off;

    sendfile on;
    keepalive_timeout 65;
    
    upstream backend {
        server backend:8080;
    }

    upstream docker_registry {
        server registry:5000;
    }

    upstream registry-web {
        server registry-web:8080;
    }

    upstream jenkins {
        server jenkins:8080;
    }

    upstream signoz {
        server signoz-frontend:3301;
    }

    server {
        listen 0.0.0.0:80;
        server_name api.momuzzi.site registry.momuzzi.site jenkins.momuzzi.site monitoring.momuzzi.site www.momuzzi.site localhost;
        return 301 https://$host$request_uri;
    }

    # WAS
    server {
        listen 0.0.0.0:443 ssl;
        server_name api.momuzzi.site;

        ssl_certificate /etc/letsencrypt/live/api.momuzzi.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.momuzzi.site/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        location /swagger-ui/ {
            proxy_pass http://backend/swagger-ui/;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        location / {
            proxy_pass http://backend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_pass_request_headers on;

            proxy_redirect off;
            proxy_next_upstream http_502 http_503 http_504;

            # 허용된 origin만 CORS 적용
            set $cors_origin "";
            if ($http_origin ~* "^https?://(www\.momuzzi\.site|localhost:3000)$") {    # 프론트 도메인 + 로컬
                set $cors_origin $http_origin;
            }

            # CORS 헤더
            add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '$cors_origin' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' '0' always;
                add_header 'Content-Type' 'text/plain' always;
                return 204;
            }
        }
    }

    # Jenkins CI/CD Server
    server {
        listen 0.0.0.0:443 ssl;
        server_name jenkins.momuzzi.site;

        ssl_certificate /etc/letsencrypt/live/jenkins.momuzzi.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/jenkins.momuzzi.site/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        location / {
            proxy_pass http://jenkins;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_redirect off;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_read_timeout 90;
            proxy_send_timeout 90;

            client_max_body_size 100m;
        }
    }

    # Docker Registry
    server {
        listen 0.0.0.0:443 ssl;
        server_name registry.momuzzi.site;

        ssl_certificate /etc/letsencrypt/live/registry.momuzzi.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/registry.momuzzi.site/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        add_header Docker-Distribution-Api-Version "registry/2.0" always;

        location /v2/ {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_request_buffering off;

            proxy_read_timeout 900;
            proxy_send_timeout 900;

            proxy_pass http://docker_registry/v2/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_set_header Authorization $http_authorization;
            proxy_pass_request_headers on;

            client_max_body_size 0;
            chunked_transfer_encoding on;
        }

        location / {
            auth_basic "Docker Registry Web";
            auth_basic_user_file /etc/nginx/.htpasswd;

            proxy_pass http://registry-web/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # 프론트 도메인
    server {
        listen 0.0.0.0:443 ssl;
        server_name www.momuzzi.site;

        ssl_certificate /etc/letsencrypt/live/www.momuzzi.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.momuzzi.site/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        location / {
            set $frontend_upstream http://deploy-web-1:3000;
            proxy_pass $frontend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }


    # 프론트 (로컬 테스트용)
    server {
        listen 0.0.0.0:443 ssl;
        server_name localhost;

        ssl_certificate /etc/letsencrypt/live/www.momuzzi.site/fullchain.pem;   # 공용 인증서 재사용
        ssl_certificate_key /etc/letsencrypt/live/www.momuzzi.site/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        location / {
            set $frontend_upstream http://deploy-web-1:3000;
            proxy_pass $frontend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # SigNoz 모니터링
    server {
        listen 0.0.0.0:443 ssl;
        server_name monitoring.momuzzi.site;
        ssl_certificate /etc/letsencrypt/live/monitoring.momuzzi.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/monitoring.momuzzi.site/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        auth_basic "SigNoz Monitoring - Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;

        location / {
            proxy_pass http://signoz;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_read_timeout 300;
            proxy_send_timeout 300;
        }
    }
}