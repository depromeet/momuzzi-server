pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        // ÌÉÄÏûÑÏ°¥ ÏÑ§Ï†ï (ÌïúÍµ≠ ÏãúÍ∞Ñ)
        TZ = 'Asia/Seoul'
        
        // Registry ÏÑ§Ï†ï
        REGISTRY_URL = "registry.momuzzi.site"
        REGISTRY_CREDENTIALS_ID = "depromeet-registry"
        
        // Docker Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï
        IMAGE_NAME = "depromeet-server-image"
        
        // NCP Server ÏÑ§Ï†ï
        NCP_SERVER_CREDENTIALS_ID = "depromeet-server"
        NCP_SERVER_HOST = "api.momuzzi.site"
        NCP_SERVER_USER = "ubuntu"

        DEPLOY_PATH = "/home/ubuntu/momuzzi-server"
        
        // Kotlin Ïª¥ÌååÏùº ÏµúÏ†ÅÌôî
        GRADLE_OPTS = "-Xmx4g -XX:MaxMetaspaceSize=512m"
        
        // Gradle Ï∫êÏãú ÏÑ§Ï†ï
        GRADLE_USER_HOME = "${env.WORKSPACE}/.gradle"
    }
    
    tools {
        gradle 'gradle-8.14.3'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                script {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew --stop || true'
                    sh 'pkill -f "KotlinCompileDaemon" || true'
                    
                    // Docker Ï†ïÎ¶¨(ÏùºÏãúÏ†ÅÏúºÎ°ú Ï£ºÏÑù Ï≤òÎ¶¨)
                    // sh 'docker system prune -f || true'
                    // sh 'docker builder prune -f || true'
                }
            }
        }
        stage('Test') {
            when {
                anyOf {
                    allOf {
                        changeRequest()
                        changeRequest target: 'dev'
                    }
                    branch 'main'
                }
            }
            environment {
                GRADLE_USER_HOME = "${env.WORKSPACE}/.gradle"
            }
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    retry(2) {
                        sh '''#!/bin/bash -eo pipefail
./gradlew test --parallel --no-daemon --stacktrace --build-cache | tee test-result.log
'''
                    }
                }
            }
            post {
                always {
                    script {
                        // ÌÖåÏä§Ìä∏ Í≤∞Í≥º Î¶¨Ìè¨Ìä∏ Ï†ÄÏû•
                        def testResults = junit '**/build/test-results/test/*.xml'
                        
                        // ÌÖåÏä§Ìä∏ ÏöîÏïΩ Ï∂úÎ†•
                        sh 'grep -E "Test result|BUILD SUCCESSFUL|BUILD FAILED" -A 5 test-result.log || true'
                        
                        // PRÏóêÎßå ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏΩîÎ©òÌä∏ Ï∂îÍ∞Ä
                        if (env.CHANGE_ID) {
                            def totalCount = testResults.totalCount
                            def passCount = testResults.passCount
                            def failCount = testResults.failCount
                            def skipCount = testResults.skipCount
                            
                            def status = failCount == 0 ? '‚úÖ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'
                            def emoji = failCount == 0 ? 'üéâ' : '‚ö†Ô∏è'
                            def buildUrl = env.BUILD_URL
                            
                            // Ïã§Ìå®Ìïú ÌÖåÏä§Ìä∏ Î™©Î°ù Ï∂îÏ∂ú
                            def failedTests = ""
                            if (failCount > 0) {
                                def failedTestsList = testResults.getFailedTests()
                                def failedTestsInfo = []
                                
                                failedTestsList.take(10).each { test ->
                                    def className = test.className.tokenize('.').last()
                                    def testName = test.name
                                    failedTestsInfo.add("- \`${className}.${testName}\`")
                                }
                                
                                if (failedTestsList.size() > 10) {
                                    failedTestsInfo.add("- ... Ïô∏ ${failedTestsList.size() - 10}Í∞ú")
                                }
                                
                                failedTests = """

### ${emoji} Ïã§Ìå®Ìïú ÌÖåÏä§Ìä∏
${failedTestsInfo.join('\n')}
"""
                            }
                            
                            // GitHub Î†àÌè¨ÏßÄÌÜ†Î¶¨ Ï†ïÎ≥¥ Ï∂îÏ∂ú
                            def repoFullName = sh(
                                script: '''
                                    if [ -n "${CHANGE_URL}" ]; then
                                        echo "${CHANGE_URL}" | sed -E 's|https://github.com/([^/]+/[^/]+)/pull/.*|\\1|'
                                    else
                                        echo "${GIT_URL}" | sed -E 's|.*github.com[:/]([^/]+/[^.]+)(\\.git)?|\\1|'
                                    fi
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            // ÏΩîÎ©òÌä∏ ÎÇ¥Ïö©ÏùÑ ÌååÏùºÎ°ú Ï†ÄÏû• (JSON Ïù¥Ïä§ÏºÄÏù¥Ìïë Î¨∏Ï†ú ÌöåÌîº)
                            def commentBody = """## üß™ ÌÖåÏä§Ìä∏ Í≤∞Í≥º ${status}

**üìä ÌÜµÍ≥Ñ**
- Ï†ÑÏ≤¥: ${totalCount}Í∞ú
- ÏÑ±Í≥µ: ${passCount}Í∞ú ‚úÖ
- Ïã§Ìå®: ${failCount}Í∞ú ${failCount > 0 ? '‚ùå' : ''}
- Ïä§ÌÇµ: ${skipCount}Í∞ú ‚è≠Ô∏è
${failedTests}

**üîó ÎßÅÌÅ¨**
- [ÏÉÅÏÑ∏ ÌÖåÏä§Ìä∏ Í≤∞Í≥º Î≥¥Í∏∞](${buildUrl}testReport/)
- [ÎπåÎìú Î°úÍ∑∏ Î≥¥Í∏∞](${buildUrl}console)

---
_Build #${env.BUILD_NUMBER} ‚Ä¢ ${new Date().format('yyyy-MM-dd HH:mm:ss KST')}_
"""
                            
                            writeFile file: 'pr-comment.txt', text: commentBody
                            
                            // GitHub APIÎ•º ÌÜµÌï¥ PR ÏΩîÎ©òÌä∏ Ï∂îÍ∞Ä
                            withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                                sh """
                                    # JSON payload ÏÉùÏÑ± (jqÎ°ú ÏïàÏ†ÑÌïòÍ≤å Ïù∏ÏΩîÎî©)
                                    COMMENT_BODY=\$(cat pr-comment.txt | jq -Rs .)
                                    
                                    # GitHub API Ìò∏Ï∂ú
                                    RESPONSE=\$(curl -s -w "\\n%{http_code}" -X POST \\
                                      -H "Authorization: token \${GITHUB_TOKEN}" \\
                                      -H "Accept: application/vnd.github.v3+json" \\
                                      https://api.github.com/repos/${repoFullName}/issues/${env.CHANGE_ID}/comments \\
                                      -d "{\\"body\\":\${COMMENT_BODY}}")
                                    
                                    HTTP_CODE=\$(echo "\$RESPONSE" | tail -n1)
                                    RESPONSE_BODY=\$(echo "\$RESPONSE" | head -n-1)
                                    
                                    if [ "\$HTTP_CODE" -eq 201 ]; then
                                        echo "‚úÖ PR ÏΩîÎ©òÌä∏ Ï∂îÍ∞Ä ÏÑ±Í≥µ"
                                    else
                                        echo "‚ö†Ô∏è PR ÏΩîÎ©òÌä∏ Ï∂îÍ∞Ä Ïã§Ìå® (HTTP \$HTTP_CODE)"
                                        echo "Response: \$RESPONSE_BODY"
                                    fi
                                """
                            }
                            
                            // ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
                            sh 'rm -f pr-comment.txt'
                        }
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                script {
                    // Î∏åÎûúÏπò Ï†ïÎ≥¥ ÎîîÎ≤ÑÍπÖ
                    echo "Current branch: ${env.BRANCH_NAME}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    sh 'echo "Git branch from command: $(git branch --show-current)"'
                    sh 'echo "All git branches: $(git branch -a)"'

                    sh '''
                    ./gradlew :module-api:clean :module-api:bootJar \
                    --no-daemon \
                    --stacktrace \
                    -x test \
                    -Dorg.gradle.jvmargs="-Xmx1g -XX:MaxMetaspaceSize=512m" \
                    -Dkotlin.daemon.jvm.options="-Xmx512m,-XX:MaxMetaspaceSize=256m" \
                    -Dkotlin.incremental=false
                    '''
                }
            }
        }

        stage('Docker Build Test') {
            when {
                changeRequest()
            }
            steps {
                script {
                    sh '''
                        docker build -f module-api/Dockerfile -t test-build .
                        docker rmi test-build || true
                    '''
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    def isMainBranch = env.BRANCH_NAME == 'main' ||
                                     env.GIT_BRANCH == 'origin/main' ||
                                     env.GIT_BRANCH == 'main' ||
                                     sh(script: 'git branch --show-current', returnStdout: true).trim() == 'main'

                    if (isMainBranch) {
                        // Docker Ï∫êÏãú Ï†ïÎ¶¨ (ÏÜêÏÉÅÎêú Î†àÏù¥Ïñ¥ Ï†úÍ±∞)
                        sh """
                            docker system prune -af
                            docker builder prune -af
                        """

                        def imageTag = "${env.GIT_COMMIT_SHORT}"
                        def fullImageName = "${REGISTRY_URL}/${IMAGE_NAME}"

                        // Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú (Ï∫êÏãú ÏÇ¨Ïö© ÏïàÌï®)
                        sh """
                            docker build --no-cache -f module-api/Dockerfile -t ${fullImageName}:${imageTag} .
                            docker tag ${fullImageName}:${imageTag} ${fullImageName}:latest
                        """

                        // RegistryÏóê Î°úÍ∑∏Ïù∏ Î∞è Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
                        withCredentials([usernamePassword(
                            credentialsId: "${REGISTRY_CREDENTIALS_ID}",
                            usernameVariable: 'REGISTRY_USERNAME',
                            passwordVariable: 'REGISTRY_PASSWORD'
                        )]) {
                            sh """
                                # Docker Î°úÍ∑∏ÏïÑÏõÉ ÌõÑ Ïû¨Î°úÍ∑∏Ïù∏
                                docker logout ${REGISTRY_URL} || true

                                echo "Attempting login to ${REGISTRY_URL} with user: \$REGISTRY_USERNAME"
                                echo \$REGISTRY_PASSWORD | docker login ${REGISTRY_URL} -u \$REGISTRY_USERNAME --password-stdin

                                # Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ ÌôïÏù∏
                                docker images | grep ${fullImageName}

                                # Push ÏãúÎèÑ
                                docker push ${fullImageName}:${imageTag}
                                docker push ${fullImageName}:latest
                            """
                        }

                        // Î°úÏª¨ Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
                        sh """
                            docker rmi ${fullImageName}:${imageTag} || true
                            docker rmi ${fullImageName}:latest || true
                        """
                    } else {
                        echo "Skipping Docker Build & Push - not main branch"
                    }
                }
            }
        }

        stage('Deploy to NCP Server') {
            steps {
                script {
                    def isMainBranch = env.BRANCH_NAME == 'main' ||
                                     env.GIT_BRANCH == 'origin/main' ||
                                     env.GIT_BRANCH == 'main' ||
                                     sh(script: 'git branch --show-current', returnStdout: true).trim() == 'main'

                    if (isMainBranch) {
                        withCredentials([usernamePassword(
                            credentialsId: "${REGISTRY_CREDENTIALS_ID}",
                            usernameVariable: 'REGISTRY_USERNAME',
                            passwordVariable: 'REGISTRY_PASSWORD'
                        )]) {
                            sshagent(credentials: ["${NCP_SERVER_CREDENTIALS_ID}"]) {
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${NCP_SERVER_USER}@${NCP_SERVER_HOST} << 'EOF'
export REGISTRY_USERNAME="${REGISTRY_USERNAME}"
export REGISTRY_PASSWORD="${REGISTRY_PASSWORD}"
export REGISTRY_URL="${REGISTRY_URL}"
export IMAGE_NAME="${IMAGE_NAME}"
export DEPLOY_PATH="${DEPLOY_PATH}"

# Î∞∞Ìè¨ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
cd \${DEPLOY_PATH}

# Git ÏµúÏã† ÏΩîÎìú pull
git fetch origin
git reset --hard origin/main

# Docker ÎÑ§Ìä∏ÏõåÌÅ¨Í∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
docker network ls | grep depromeet_network || docker network create depromeet_network

# Registry Ïù¥ÎØ∏ÏßÄ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
REGISTRY_IMAGE_EXISTS=false

# RegistryÏóê Î°úÍ∑∏Ïù∏ ÏãúÎèÑ
if echo "\${REGISTRY_PASSWORD}" | docker login \${REGISTRY_URL} -u "\${REGISTRY_USERNAME}" --password-stdin; then
    # Ïù¥ÎØ∏ÏßÄ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (HTTPS ÏÇ¨Ïö©)
    if docker pull \${REGISTRY_URL}/\${IMAGE_NAME}:latest > /dev/null 2>&1; then
        echo "Registry image found, using registry image"
        REGISTRY_IMAGE_EXISTS=true
    else
        echo "Registry image not found, will build locally"
    fi
else
    echo "Registry login failed, will build locally"
fi

# Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë
docker-compose -f docker-compose.prod.yml stop backend nginx || true
docker-compose -f docker-compose.prod.yml rm -f backend nginx || true

if [ "\$REGISTRY_IMAGE_EXISTS" = true ]; then
    # Registry Ïù¥ÎØ∏ÏßÄÎ•º backend:latestÎ°ú ÌÉúÍ∑∏ ÌõÑ Î∞∞Ìè¨
    docker pull \${REGISTRY_URL}/\${IMAGE_NAME}:latest
    docker tag \${REGISTRY_URL}/\${IMAGE_NAME}:latest backend:latest
fi

# Backend Î®ºÏ†Ä ÏãúÏûë
docker-compose -f docker-compose.prod.yml up -d backend

# BackendÍ∞Ä healthy ÏÉÅÌÉúÍ∞Ä Îê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞ (ÏµúÎåÄ 2Î∂Ñ)
echo "Waiting for backend to be healthy..."
for i in {1..24}; do
    if docker inspect --format='{{.State.Health.Status}}' backend 2>/dev/null | grep -q "healthy"; then
        echo "Backend is healthy"
        break
    fi
    echo "Waiting... (\$i/24)"
    sleep 5
done

# Nginx ÏãúÏûë
docker-compose -f docker-compose.prod.yml up -d nginx

# ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
docker image prune -af --filter "until=24h"

# Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏
sleep 10
docker ps
echo "Checking service health..."
docker inspect --format='{{.Name}}: {{.State.Health.Status}}' backend nginx || true
EOF
                                """
                            }
                        }
                    } else {
                        echo "Skipping Deploy to NCP Server - not main branch"
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Gradle daemon Ï†ïÎ¶¨
            sh './gradlew --stop || true'
            // .gradle Ï∫êÏãúÎäî Î≥¥Ï°¥ÌïòÎ©¥ÏÑú ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ Ï†ïÎ¶¨
            cleanWs patterns: [[pattern: '.gradle/**', type: 'EXCLUDE']]
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
